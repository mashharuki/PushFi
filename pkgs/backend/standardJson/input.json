{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"./IERC1155.sol\";\nimport {IERC1155Receiver} from \"./IERC1155Receiver.sol\";\nimport {IERC1155MetadataURI} from \"./extensions/IERC1155MetadataURI.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {Arrays} from \"../../utils/Arrays.sol\";\nimport {IERC1155Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n */\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\n    using Arrays for uint256[];\n    using Arrays for address[];\n\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\n\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     */\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual returns (uint256[] memory) {\n        if (accounts.length != ids.length) {\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\n        }\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeTransferFrom(from, to, id, value, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\n     * (or `to`) is the zero address.\n     *\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     *\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\n     */\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\n        if (ids.length != values.length) {\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\n        }\n\n        address operator = _msgSender();\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids.unsafeMemoryAccess(i);\n            uint256 value = values.unsafeMemoryAccess(i);\n\n            if (from != address(0)) {\n                uint256 fromBalance = _balances[id][from];\n                if (fromBalance < value) {\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\n                }\n                unchecked {\n                    // Overflow not possible: value <= fromBalance\n                    _balances[id][from] = fromBalance - value;\n                }\n            }\n\n            if (to != address(0)) {\n                _balances[id][to] += value;\n            }\n        }\n\n        if (ids.length == 1) {\n            uint256 id = ids.unsafeMemoryAccess(0);\n            uint256 value = values.unsafeMemoryAccess(0);\n            emit TransferSingle(operator, from, to, id, value);\n        } else {\n            emit TransferBatch(operator, from, to, ids, values);\n        }\n    }\n\n    /**\n     * @dev Version of {_update} that performs the token acceptance check by calling\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\n     * contains code (eg. is a smart contract at the moment of execution).\n     *\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\n     * overriding {_update} instead.\n     */\n    function _updateWithAcceptanceCheck(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal virtual {\n        _update(from, to, ids, values);\n        if (to != address(0)) {\n            address operator = _msgSender();\n            if (ids.length == 1) {\n                uint256 id = ids.unsafeMemoryAccess(0);\n                uint256 value = values.unsafeMemoryAccess(0);\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\n            } else {\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the values in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     * - `ids` and `values` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC1155InvalidOperator(address(0));\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Creates an array in memory with only one value for each of the elements provided.\n     */\n    function _asSingletonArrays(\n        uint256 element1,\n        uint256 element2\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Load the free memory pointer\n            array1 := mload(0x40)\n            // Set array length to 1\n            mstore(array1, 1)\n            // Store the single element at the next word after the length (where content starts)\n            mstore(add(array1, 0x20), element1)\n\n            // Repeat for next array locating it right after the first array\n            array2 := add(array1, 0x40)\n            mstore(array2, 1)\n            mstore(add(array2, 0x20), element2)\n\n            // Update the free memory pointer by pointing after the second array\n            mstore(0x40, add(array2, 0x40))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1155} from \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(address account, uint256 id, uint256 value) public virtual {\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\n        }\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\n        }\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Supply.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC1155} from \"../ERC1155.sol\";\n\n/**\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\n *\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\n * clearly identified. Note: While a totalSupply of 1 might mean the\n * corresponding is an NFT, there is no guarantees that no other token with the\n * same id are not going to be minted.\n *\n * NOTE: This contract implies a global limit of 2**256 - 1 to the number of tokens\n * that can be minted.\n *\n * CAUTION: This extension should not be added in an upgrade to an already deployed contract.\n */\nabstract contract ERC1155Supply is ERC1155 {\n    mapping(uint256 id => uint256) private _totalSupply;\n    uint256 private _totalSupplyAll;\n\n    /**\n     * @dev Total value of tokens in with a given id.\n     */\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\n        return _totalSupply[id];\n    }\n\n    /**\n     * @dev Total value of tokens.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupplyAll;\n    }\n\n    /**\n     * @dev Indicates whether any token exist with a given id, or not.\n     */\n    function exists(uint256 id) public view virtual returns (bool) {\n        return totalSupply(id) > 0;\n    }\n\n    /**\n     * @dev See {ERC1155-_update}.\n     */\n    function _update(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values\n    ) internal virtual override {\n        super._update(from, to, ids, values);\n\n        if (from == address(0)) {\n            uint256 totalMintValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values[i];\n                // Overflow check required: The rest of the code assumes that totalSupply never overflows\n                _totalSupply[ids[i]] += value;\n                totalMintValue += value;\n            }\n            // Overflow check required: The rest of the code assumes that totalSupplyAll never overflows\n            _totalSupplyAll += totalMintValue;\n        }\n\n        if (to == address(0)) {\n            uint256 totalBurnValue = 0;\n            for (uint256 i = 0; i < ids.length; ++i) {\n                uint256 value = values[i];\n\n                unchecked {\n                    // Overflow not possible: values[i] <= balanceOf(from, ids[i]) <= totalSupply(ids[i])\n                    _totalSupply[ids[i]] -= value;\n                    // Overflow not possible: sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                    totalBurnValue += value;\n                }\n            }\n            unchecked {\n                // Overflow not possible: totalBurnValue = sum_i(values[i]) <= sum_i(totalSupply(ids[i])) <= totalSupplyAll\n                _totalSupplyAll -= totalBurnValue;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/base/ERC404.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nabstract contract Ownable {\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\n\n    error Unauthorized();\n    error InvalidOwner();\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        if (msg.sender != owner) revert Unauthorized();\n\n        _;\n    }\n\n    constructor(address _owner) {\n        if (_owner == address(0)) revert InvalidOwner();\n\n        owner = _owner;\n\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function transferOwnership(address _owner) public virtual onlyOwner {\n        if (_owner == address(0)) revert InvalidOwner();\n\n        owner = _owner;\n\n        emit OwnershipTransferred(msg.sender, _owner);\n    }\n\n    function revokeOwnership() public virtual onlyOwner {\n        owner = address(0);\n\n        emit OwnershipTransferred(msg.sender, address(0));\n    }\n}\n\nabstract contract ERC721Receiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external virtual returns (bytes4) {\n        return ERC721Receiver.onERC721Received.selector;\n    }\n}\n\n/// @notice ERC404\n///         A gas-efficient, mixed ERC20 / ERC721 implementation\n///         with native liquidity and fractionalization.\n///\n///         This is an experimental standard designed to integrate\n///         with pre-existing ERC20 / ERC721 support as smoothly as\n///         possible.\n///\n/// @dev    In order to support full functionality of ERC20 and ERC721\n///         supply assumptions are made that slightly constraint usage.\n///         Ensure decimals are sufficiently large (standard 18 recommended)\n///         as ids are effectively encoded in the lowest range of amounts.\n///\n///         NFTs are spent on ERC20 functions in a FILO queue, this is by\n///         design.\n///\nabstract contract ERC404 is Ownable {\n    // Events\n    event ERC20Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 amount\n    );\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed id\n    );\n    event ERC721Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 indexed id\n    );\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    // Errors\n    error NotFound();\n    error AlreadyExists();\n    error InvalidRecipient();\n    error InvalidSender();\n    error UnsafeRecipient();\n\n    // Metadata\n    /// @dev Token name\n    string public name;\n\n    /// @dev Token symbol\n    string public symbol;\n\n    /// @dev Decimals for fractional representation\n    uint8 public immutable decimals;\n\n    /// @dev Total supply in fractionalized representation\n    uint256 public immutable totalSupply;\n\n    /// @dev Current mint counter, monotonically increasing to ensure accurate ownership\n    uint256 public minted;\n\n    // Mappings\n    /// @dev Balance of user in fractional representation\n    mapping(address => uint256) public balanceOf;\n\n    /// @dev Allowance of user in fractional representation\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /// @dev Approval in native representaion\n    mapping(uint256 => address) public getApproved;\n\n    /// @dev Approval for all in native representation\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    /// @dev Owner of id in native representation\n    mapping(uint256 => address) internal _ownerOf;\n\n    /// @dev Array of owned ids in native representation\n    mapping(address => uint256[]) internal _owned;\n\n    /// @dev Tracks indices for the _owned mapping\n    mapping(uint256 => uint256) internal _ownedIndex;\n\n    /// @dev Addresses whitelisted from minting / burning for gas savings (pairs, routers, etc)\n    mapping(address => bool) public whitelist;\n\n    // Constructor\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals,\n        uint256 _totalNativeSupply,\n        address _owner\n    ) Ownable(_owner) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalNativeSupply * (10 ** decimals);\n    }\n\n    /// @notice Initialization function to set pairs / etc\n    ///         saving gas by avoiding mint / burn on unnecessary targets\n    function setWhitelist(address target, bool state) public onlyOwner {\n        whitelist[target] = state;\n    }\n\n    /// @notice Function to find owner of a given native token\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\n        owner = _ownerOf[id];\n\n        if (owner == address(0)) {\n            revert NotFound();\n        }\n    }\n\n    /// @notice tokenURI must be implemented by child contract\n    function tokenURI(uint256 id) public view virtual returns (string memory);\n\n    /// @notice Function for token approvals\n    /// @dev This function assumes id / native if amount less than or equal to current max id\n    function approve(\n        address spender,\n        uint256 amountOrId\n    ) public virtual returns (bool) {\n        if (amountOrId <= minted && amountOrId > 0) {\n            address owner = _ownerOf[amountOrId];\n\n            if (msg.sender != owner && !isApprovedForAll[owner][msg.sender]) {\n                revert Unauthorized();\n            }\n\n            getApproved[amountOrId] = spender;\n\n            emit Approval(owner, spender, amountOrId);\n        } else {\n            allowance[msg.sender][spender] = amountOrId;\n\n            emit Approval(msg.sender, spender, amountOrId);\n        }\n\n        return true;\n    }\n\n    /// @notice Function native approvals\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    /// @notice Function for mixed transfers\n    /// @dev This function assumes id / native if amount less than or equal to current max id\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amountOrId\n    ) public virtual {\n        if (amountOrId <= minted) {\n            if (from != _ownerOf[amountOrId]) {\n                revert InvalidSender();\n            }\n\n            if (to == address(0)) {\n                revert InvalidRecipient();\n            }\n\n            if (\n                msg.sender != from &&\n                !isApprovedForAll[from][msg.sender] &&\n                msg.sender != getApproved[amountOrId]\n            ) {\n                revert Unauthorized();\n            }\n\n            balanceOf[from] -= _getUnit();\n\n            unchecked {\n                balanceOf[to] += _getUnit();\n            }\n\n            _ownerOf[amountOrId] = to;\n            delete getApproved[amountOrId];\n\n            // update _owned for sender\n            uint256 updatedId = _owned[from][_owned[from].length - 1];\n            _owned[from][_ownedIndex[amountOrId]] = updatedId;\n            // pop\n            _owned[from].pop();\n            // update index for the moved id\n            _ownedIndex[updatedId] = _ownedIndex[amountOrId];\n            // push token to owned\n            _owned[to].push(amountOrId);\n            // update index for to owned\n            _ownedIndex[amountOrId] = _owned[to].length - 1;\n\n            emit Transfer(from, to, amountOrId);\n            emit ERC20Transfer(from, to, _getUnit());\n        } else {\n            uint256 allowed = allowance[from][msg.sender];\n\n            if (allowed != type(uint256).max)\n                allowance[from][msg.sender] = allowed - amountOrId;\n\n            _transfer(from, to, amountOrId);\n        }\n    }\n\n    /// @notice Function for fractional transfers\n    function transfer(\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        return _transfer(msg.sender, to, amount);\n    }\n\n    /// @notice Function for native transfers with contract support\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        if (\n            to.code.length != 0 &&\n            ERC721Receiver(to).onERC721Received(msg.sender, from, id, \"\") !=\n            ERC721Receiver.onERC721Received.selector\n        ) {\n            revert UnsafeRecipient();\n        }\n    }\n\n    /// @notice Function for native transfers with contract support and callback data\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        bytes calldata data\n    ) public virtual {\n        transferFrom(from, to, id);\n\n        if (\n            to.code.length != 0 &&\n            ERC721Receiver(to).onERC721Received(msg.sender, from, id, data) !=\n            ERC721Receiver.onERC721Received.selector\n        ) {\n            revert UnsafeRecipient();\n        }\n    }\n\n    /// @notice Internal function for fractional transfers\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal returns (bool) {\n        uint256 unit = _getUnit();\n        uint256 balanceBeforeSender = balanceOf[from];\n        uint256 balanceBeforeReceiver = balanceOf[to];\n\n        balanceOf[from] -= amount;\n\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        // Skip burn for certain addresses to save gas\n        if (!whitelist[from]) {\n            uint256 tokens_to_burn = (balanceBeforeSender / unit) -\n                (balanceOf[from] / unit);\n            for (uint256 i = 0; i < tokens_to_burn; i++) {\n                _burn(from);\n            }\n        }\n\n        // Skip minting for certain addresses to save gas\n        if (!whitelist[to]) {\n            uint256 tokens_to_mint = (balanceOf[to] / unit) -\n                (balanceBeforeReceiver / unit);\n            for (uint256 i = 0; i < tokens_to_mint; i++) {\n                _mint(to);\n            }\n        }\n\n        emit ERC20Transfer(from, to, amount);\n        return true;\n    }\n\n    // Internal utility logic\n    function _getUnit() internal view returns (uint256) {\n        return 10 ** decimals;\n    }\n\n    function _mint(address to) internal virtual {\n        if (to == address(0)) {\n            revert InvalidRecipient();\n        }\n\n        unchecked {\n            minted++;\n        }\n\n        uint256 id = minted;\n\n        if (_ownerOf[id] != address(0)) {\n            revert AlreadyExists();\n        }\n\n        _ownerOf[id] = to;\n        _owned[to].push(id);\n        _ownedIndex[id] = _owned[to].length - 1;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    function _burn(address from) internal virtual {\n        if (from == address(0)) {\n            revert InvalidSender();\n        }\n\n        uint256 id = _owned[from][_owned[from].length - 1];\n        _owned[from].pop();\n        delete _ownedIndex[id];\n        delete _ownerOf[id];\n        delete getApproved[id];\n\n        emit Transfer(from, address(0), id);\n    }\n\n    function _setNameSymbol(\n        string memory _name,\n        string memory _symbol\n    ) internal {\n        name = _name;\n        symbol = _symbol;\n    }\n}"
    },
    "contracts/BattleCardNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\n\n/**\n * BattleCardNFT Contract\n */\ncontract BattleCardNFT is ERC1155, Ownable, ERC1155Burnable, ERC1155Supply {\n  constructor(\n    address initialOwner\n  )\n    ERC1155(\n      \"https://bafkreif7hoezwvq3wugnyglntmijxamfxml6odljjenfuszazqv64x6b2m.ipfs.nftstorage.link/\"\n    )\n    Ownable(initialOwner)\n  {}\n\n  function setURI(string memory newuri) public onlyOwner {\n    _setURI(newuri);\n  }\n\n  function mint(\n    address account,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) public onlyOwner {\n    _mint(account, id, amount, data);\n  }\n\n  function mintBatch(\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) public onlyOwner {\n    _mintBatch(to, ids, amounts, data);\n  }\n\n  // The following functions are overrides required by Solidity.\n  function _update(\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory values\n  ) internal override(ERC1155, ERC1155Supply) {\n    super._update(from, to, ids, values);\n  }\n}\n"
    },
    "contracts/flatten/flatten.sol": {
      "content": ""
    },
    "contracts/mock/ERC20Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract USDCToken is ERC20 {\n  constructor() ERC20(\"USDC Token\", \"USDC\") {\n    _mint(msg.sender, 10000 ether);\n  }\n\n  function faucet(address recipient, uint256 amount) external {\n    _mint(recipient, amount);\n  }\n}\n"
    },
    "contracts/mock/erc404/Example.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {ERC404} from \"./../../base/ERC404.sol\";\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * ERC404を継承したサンプルコントラクト\n */\ncontract Example is ERC404 {\n  constructor(address _owner) ERC404(\"Example\", \"EXM\", 18, 10_000, _owner) {\n    balanceOf[_owner] = totalSupply;\n    setWhitelist(_owner, true);\n  }\n\n  function tokenURI(uint256 id) public pure override returns (string memory){\n    return \"https://bafybeihd5jasbp6spqqapd6jzy7zfosiukwqbx4capmhayjt3yxagudwma.ipfs.dweb.link/json/metadata\";\n  }\n}"
    },
    "contracts/mock/SampleVRF.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\n\n/**\n * @title SampleVRF\n * @notice A contract that gets random values from Chainlink VRF V2\n */\ncontract SampleVRF is VRFConsumerBaseV2 {\n    VRFCoordinatorV2Interface immutable COORDINATOR;\n\n    // Your subscription ID.\n    uint64 immutable s_subscriptionId;\n\n    // The gas lane to use, which specifies the maximum gas price to bump to.\n    // For a list of available gas lanes on each network,\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\n    bytes32 immutable s_keyHash;\n\n    // Depends on the number of requested values that you want sent to the\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\n    // so 100,000 is a safe default for this example contract. Test and adjust\n    // this limit based on the network that you select, the size of the request,\n    // and the processing of the callback request in the fulfillRandomWords()\n    // function.\n    uint32 constant CALLBACK_GAS_LIMIT = 100000;\n\n    // The default is 3, but you can set this higher.\n    uint16 constant REQUEST_CONFIRMATIONS = 3;\n\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\n    uint32 constant NUM_WORDS = 2;\n\n    uint256[] public s_randomWords;\n    uint256 public s_requestId;\n    address s_owner;\n\n    event ReturnedRandomness(uint256[] randomWords);\n\n    /**\n     * @notice Constructor inherits VRFConsumerBaseV2\n     *\n     * @param subscriptionId - the subscription ID that this contract uses for funding requests\n     * @param vrfCoordinator - coordinator, check https://docs.chain.link/docs/vrf-contracts/#configurations\n     * @param keyHash - the gas lane to use, which specifies the maximum gas price to bump to\n     */\n    constructor(\n      uint64 subscriptionId,\n      address vrfCoordinator,\n      bytes32 keyHash\n    ) VRFConsumerBaseV2(vrfCoordinator) {\n      COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n      s_keyHash = keyHash;\n      s_owner = msg.sender;\n      s_subscriptionId = subscriptionId;\n    }\n\n    /**\n     * @notice Requests randomness\n     * Assumes the subscription is funded sufficiently; \"Words\" refers to unit of data in Computer Science\n     */\n    function requestRandomWords() external {\n      // Will revert if subscription is not set and funded.\n      s_requestId = COORDINATOR.requestRandomWords(\n        s_keyHash,\n        s_subscriptionId,\n        REQUEST_CONFIRMATIONS,\n        CALLBACK_GAS_LIMIT,\n        NUM_WORDS\n      );\n    }\n\n    /**\n     * @notice Callback function used by VRF Coordinator\n     *\n     * @param  - id of the request\n     * @param randomWords - array of random results from VRF Coordinator\n     */\n    function fulfillRandomWords(\n      uint256 /* requestId */,\n      uint256[] memory randomWords\n    ) internal override {\n      s_randomWords = randomWords;\n      emit ReturnedRandomness(randomWords);\n    }\n\n    modifier onlyOwner() {\n      require(msg.sender == s_owner);\n      _;\n    }\n}\n"
    },
    "contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "contracts/v1/WakuWakuGame.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./../WakuWakuNFT.sol\";\n\n/**\n * WakuWakuGame Contract\n */\ncontract WakuWakuGame is Ownable {\n\n  // WakuWakuGame Struct\n  struct WakuWakuGame {\n    string gameName;\n    uint256 currentCount;\n    uint256 goalCount;\n    bool openingStatus;\n    address prizeToken;\n    uint256 prizeValue;\n    address nftAddress;\n    address winner;\n    address[] paticipants;\n  }\n\n  // gameID\n  uint256 private gameIdCounter = 0;\n\n  // mapping\n  mapping(uint256 => WakuWakuGame) public games;\n\n  // Event\n  event GameCreated(uint256 gameId, string gameName, uint256 goalCount, address prizeToken, uint256 prizeValue, address nftAddress);\n  event GameFinished(uint256 gameId, address winner);\n  event PrizeSent(uint256 gameId, address erc20TokenAddress, address receiver, uint256 value);\n  event NftMinted(uint256 gameId, address nftAddress, address[] paticipants);\n  event Withdrawn(address indexed payee, uint256 weiAmount);\n  event WithdrawnToken(address indexed payee, address prizeToken, uint256 weiAmount);\n  event Deposited(address indexed payee, uint256 weiAmount);\n\n  /**\n   * Constructor\n   */\n  constructor(address initialOwner) Ownable(initialOwner) {}\n\n  /**\n   * CreateGame method\n   */\n  function createGame(\n    string memory _gameName,\n    uint256 _goalCount,\n    address _prizeToken,\n    uint256 _prizeValue,\n    address _nftAddress\n  ) onlyOwner public {\n    // get current gameId\n    uint256 currentGameIdCounter = gameIdCounter;\n    // initial participants\n    address[] memory initParticipants;\n\n    // create New WakuWakuGame\n    WakuWakuGame memory newGame = WakuWakuGame(\n      _gameName,\n      0,\n      _goalCount,\n      true,\n      _prizeToken,\n      _prizeValue,\n      _nftAddress,\n      0x0000000000000000000000000000000000000000,\n      initParticipants\n    );\n\n    games[currentGameIdCounter] = newGame;\n    gameIdCounter++;\n\n    emit GameCreated(currentGameIdCounter, _gameName, _goalCount, _prizeToken, _prizeValue, _nftAddress);\n  }\n\n  /**\n   * playGame method\n   * @param _gameId gameID\n   * * @param _player plaerAddress\n   */\n  function playGame(uint256 _gameId, address _player) public {\n    // get game info\n    WakuWakuGame memory wakuWakuGame = games[_gameId];\n    require(wakuWakuGame.openingStatus, \"This game is already finished!!\");\n\n    // increment currentCount\n    games[_gameId].currentCount += 1;\n    uint256 currentCount = games[_gameId].currentCount;\n\n    // insert player address if not yet\n    address[] memory participants = wakuWakuGame.paticipants;\n    \n    bool alreadyInsertedFlg = false;\n    // check registered status\n    for(uint256 i = 0; i < participants.length; i++) {\n      if(participants[i] == _player) {\n        alreadyInsertedFlg = true;\n      }\n    }\n\n    if(!alreadyInsertedFlg) {\n      address[] memory newParticipants = new address[](participants.length + 1);\n      // insert & set\n      for(uint256 i = 0; i < participants.length; i++) {\n        newParticipants[i] = participants[i];\n      }\n      // push\n      newParticipants[participants.length] = _player;\n      games[_gameId].paticipants = newParticipants;\n    }\n\n    // check goalCounter & currentCount\n    if(currentCount >= wakuWakuGame.goalCount) {\n      games[_gameId].openingStatus = false;\n      games[_gameId].winner = _player;\n      emit GameFinished(_gameId, _player);\n      // send token to winner & mint nft to paticipants\n      sendPrize(_gameId);\n      mintNfts(_gameId);\n    }\n  }\n\n  /**\n   * sendPrize method\n   * @param _gameId gameID\n   */\n  function sendPrize(uint256 _gameId) internal {\n    // get game info\n    WakuWakuGame memory wakuWakuGame = games[_gameId];\n    require(!wakuWakuGame.openingStatus, \"This game is not already finished!!\");\n\n    // create ERC20 contract instance\n    IERC20 prizeToken = IERC20(wakuWakuGame.prizeToken);\n    // send\n    prizeToken.transfer(wakuWakuGame.winner, wakuWakuGame.prizeValue);\n    emit PrizeSent(_gameId, wakuWakuGame.prizeToken, wakuWakuGame.winner, wakuWakuGame.prizeValue);\n  }\n\n  /**\n   * mintNfts method\n   * @param _gameId gameID\n   */\n  function mintNfts(uint256 _gameId) internal {\n    // get game info\n    WakuWakuGame memory wakuWakuGame = games[_gameId];\n    require(!wakuWakuGame.openingStatus, \"This game is not already finished!!\");\n\n    // create WakuWakuNFT contract instance\n    WakuWakuNFT nft = WakuWakuNFT(wakuWakuGame.nftAddress);\n    // get participants address\n    address[] memory participants = wakuWakuGame.paticipants;\n    // mint NFT to all participant\n    for(uint256 i = 0; i < participants.length; i++) {\n      nft.mint(participants[i], _gameId, 1, '0x');\n    }\n    emit NftMinted(_gameId, wakuWakuGame.nftAddress, participants);\n  }\n\n  /**\n   * withdraw method\n   * @param _to receiverAddress\n   */\n  function withdraw(address payable _to) onlyOwner public {\n    uint256 balance = address(this).balance;\n    _to.transfer(balance);\n    emit Withdrawn(_to, balance);\n  }\n\n  /**\n   * withdrawToken\n   */\n  function withdrawToken(\n    uint256 _gameId, \n    address payable _to\n  ) onlyOwner public {\n    // get game info\n    WakuWakuGame memory wakuWakuGame = games[_gameId];\n    // create ERC20 contract instance\n    IERC20 prizeToken = IERC20(wakuWakuGame.prizeToken);\n    // get balance of this contract\n    uint256 balance = prizeToken.balanceOf(address(this));\n    prizeToken.transfer(_to, balance);\n    emit WithdrawnToken(_to, address(prizeToken), balance);\n  }\n\n  // Function to receive Ether. msg.data must be empty\n  receive() external payable {\n    emit Deposited(msg.sender, msg.value);\n  }\n  // Fallback function is called when msg.data is not empty\n  fallback() external payable {\n    emit Deposited(msg.sender, msg.value);\n  }\n\n  /**\n   * get OpeningStatus method\n   * @param _gameId gameID\n   */\n  function getOpeningStatus(uint256 _gameId) public view returns (bool result) {\n    result = games[_gameId].openingStatus;\n    return result;\n  }\n}"
    },
    "contracts/v2/WakuWakuGameV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./../WakuWakuNFT.sol\";\nimport \"./../WakuWakuSuperNFT.sol\";\n\n/**\n * WakuWakuGameV2 Contract\n */\ncontract WakuWakuGameV2 is Ownable {\n\n  // WakuWakuGame Struct\n  struct WakuWakuGame {\n    string gameName;\n    uint256 currentCount;\n    uint256 goalCount;\n    bool openingStatus;\n    address supserNftAddress;\n    address nftAddress;\n    address winner;\n    address[] paticipants;\n    string adverUrl;\n  }\n\n  // gameID\n  uint256 private gameIdCounter = 0;\n\n  // mapping\n  mapping(uint256 => WakuWakuGame) public games;\n\n  // Event\n  event GameCreated(uint256 gameId, string gameName, uint256 goalCount, address superNftAddress, address nftAddress, string adverUrl);\n  event GameFinished(uint256 gameId, address winner);\n  event PrizeSent(uint256 gameId, address erc20TokenAddress, address receiver, uint256 value);\n  event NftMinted(uint256 gameId, address nftAddress, address player);\n  event Withdrawn(address indexed payee, uint256 weiAmount);\n  event WithdrawnToken(address indexed payee, address prizeToken, uint256 weiAmount);\n  event Deposited(address indexed payee, uint256 weiAmount);\n  event ChangeAdverUrl(string oldAdverUrl, string newAdverUrl);\n\n  /**\n   * Constructor\n   */\n  constructor(address initialOwner) Ownable(initialOwner) {}\n\n  /**\n   * CreateGame method\n   */\n  function createGame(\n    string memory _gameName,\n    uint256 _goalCount,\n    address _superNftAddress,\n    address _nftAddress,\n    string memory _adverUrl\n  ) onlyOwner public {\n    // get current gameId\n    uint256 currentGameIdCounter = gameIdCounter;\n    // initial participants\n    address[] memory initParticipants;\n\n    // create New WakuWakuGame\n    WakuWakuGame memory newGame = WakuWakuGame(\n      _gameName,\n      0,\n      _goalCount,\n      true,\n      _superNftAddress,\n      _nftAddress,\n      0x0000000000000000000000000000000000000000,\n      initParticipants,\n      _adverUrl\n    );\n\n    games[currentGameIdCounter] = newGame;\n    gameIdCounter++;\n\n    emit GameCreated(currentGameIdCounter, _gameName, _goalCount, _superNftAddress, _nftAddress, _adverUrl);\n  }\n\n  /**\n   * playGame method\n   * @param _gameId gameID\n   * * @param _player plaerAddress\n   */\n  function playGame(uint256 _gameId, address _player) public {\n    // get game info\n    WakuWakuGame memory wakuWakuGame = games[_gameId];\n    require(wakuWakuGame.openingStatus, \"This game is already finished!!\");\n\n    // increment currentCount\n    games[_gameId].currentCount += 1;\n    uint256 currentCount = games[_gameId].currentCount;\n\n    // insert player address if not yet\n    address[] memory participants = wakuWakuGame.paticipants;\n    \n    bool alreadyInsertedFlg = false;\n    // check registered status\n    for(uint256 i = 0; i < participants.length; i++) {\n      if(participants[i] == _player) {\n        alreadyInsertedFlg = true;\n      }\n    }\n\n    if(!alreadyInsertedFlg) {\n      address[] memory newParticipants = new address[](participants.length + 1);\n      // insert & set\n      for(uint256 i = 0; i < participants.length; i++) {\n        newParticipants[i] = participants[i];\n      }\n      // push\n      newParticipants[participants.length] = _player;\n      games[_gameId].paticipants = newParticipants;\n    }\n\n    // goalCountに設定された倍数回目かをチェックする。\n    if(isMultipleOfGoalCount(currentCount, wakuWakuGame.goalCount)) {\n      // send Super NFT\n      mintNft(wakuWakuGame.supserNftAddress, _gameId, _player);\n    } else {\n      // send Normal NFT\n      mintNft(wakuWakuGame.nftAddress, _gameId, _player);\n    }\n  }\n\n  /**\n   * mintNfts method\n   * @param _nftAddress NFT Contract Address\n   * @param _gameId gameID\n   * @param _player palyer's address\n   */\n  function mintNft(\n    address _nftAddress,\n    uint256 _gameId, \n    address _player\n  ) internal {\n    // get game info\n    WakuWakuGame memory wakuWakuGame = games[_gameId];\n    \n    if(wakuWakuGame.nftAddress == _nftAddress) {\n      // create WakuWakuNFT contract instance\n      WakuWakuNFT nft = WakuWakuNFT(wakuWakuGame.nftAddress);\n      // mint \n      nft.mint(_player, _gameId, 1, '0x');\n    } else {\n      // create WakuWakuSuperNFT contract instance\n      WakuWakuSuperNFT nft = WakuWakuSuperNFT(wakuWakuGame.supserNftAddress);\n      // mint \n      nft.mint(_player, _gameId, 1, '0x');\n    }\n\n    emit NftMinted(_gameId, wakuWakuGame.nftAddress, _player);\n  }\n\n  /**\n   * withdraw method\n   * @param _to receiverAddress\n   */\n  function withdraw(address payable _to) onlyOwner public {\n    uint256 balance = address(this).balance;\n    _to.transfer(balance);\n    emit Withdrawn(_to, balance);\n  }\n\n  // Function to receive Ether. msg.data must be empty\n  receive() external payable {\n    emit Deposited(msg.sender, msg.value);\n  }\n  // Fallback function is called when msg.data is not empty\n  fallback() external payable {\n    emit Deposited(msg.sender, msg.value);\n  }\n\n  /**\n   * get OpeningStatus method\n   * @param _gameId gameID\n   */\n  function getOpeningStatus(uint256 _gameId) public view returns (bool result) {\n    result = games[_gameId].openingStatus;\n    return result;\n  }\n\n  /**\n   * Pause Game\n   */\n  function pauseGame(uint256 _gameId) public onlyOwner {\n    games[_gameId].openingStatus = false;\n  }\n\n  /**\n   * change Adver URL method\n   */\n  function changeAdverUrl(uint256 _gameId, string memory _newAdverUrl) public onlyOwner {\n    string memory oldAdverUrl = games[_gameId].adverUrl;\n    games[_gameId].adverUrl = _newAdverUrl;\n    // emit\n    emit ChangeAdverUrl(oldAdverUrl, _newAdverUrl);\n  }\n\n  /**\n   * goalCountに設定された倍数回目かをチェックするメソッド\n   */\n  function isMultipleOfGoalCount(\n    uint256 _currentCount,\n    uint256 _goalCount\n  ) internal pure returns (bool) {\n    return (_currentCount % _goalCount == 0);\n  }\n}"
    },
    "contracts/v3/WakuWakuGameV3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./../WakuWakuNFT.sol\";\nimport \"./../WakuWakuSuperNFT.sol\";\n\n/**\n * WakuWakuGameV3 Contract\n */\ncontract WakuWakuGameV3 is Ownable, ReentrancyGuard {\n  // WakuWakuGame Struct\n  struct WakuWakuGame {\n    string gameName;\n    uint256 currentCount;\n    uint256 goalCount;\n    bool openingStatus;\n    address supserNftAddress;\n    address nftAddress;\n    address winner;\n    address[] paticipants;\n    string adverUrl;\n  }\n\n  // gameID\n  uint256 private gameIdCounter = 0;\n  // ミントできる確率の分母(数が大きくなるほど確率は低くなる)\n  uint256 public mintProbability = 50;\n\n  // mapping\n  mapping(uint256 => WakuWakuGame) public games;\n\n  // Event\n  event GameCreated(\n    uint256 gameId,\n    string gameName,\n    uint256 goalCount,\n    address superNftAddress,\n    address nftAddress,\n    string adverUrl\n  );\n  event GameFinished(uint256 gameId, address winner);\n  event PrizeSent(\n    uint256 gameId,\n    address erc20TokenAddress,\n    address receiver,\n    uint256 value\n  );\n  event NftMinted(uint256 gameId, address nftAddress, address player);\n  event Withdrawn(address indexed payee, uint256 weiAmount);\n  event WithdrawnToken(\n    address indexed payee,\n    address prizeToken,\n    uint256 weiAmount\n  );\n  event Deposited(address indexed payee, uint256 weiAmount);\n  event ChangeAdverUrl(string oldAdverUrl, string newAdverUrl);\n  event ChangeNormalNftAddress(\n    address oldNormalNftAddress,\n    address newNormalNftAddress\n  );\n  event ChangeSuperNftAddress(\n    address oldSuperNftAddress,\n    address newSuperNftAddress\n  );\n\n  /**\n   * Constructor\n   */\n  constructor(address initialOwner) Ownable(initialOwner) {}\n\n  /**\n   * CreateGame method\n   */\n  function createGame(\n    string memory _gameName,\n    uint256 _goalCount,\n    address _superNftAddress,\n    address _nftAddress,\n    string memory _adverUrl\n  ) public onlyOwner {\n    // get current gameId\n    uint256 currentGameIdCounter = gameIdCounter;\n    // initial participants\n    address[] memory initParticipants;\n\n    // create New WakuWakuGame\n    WakuWakuGame memory newGame = WakuWakuGame(\n      _gameName,\n      0,\n      _goalCount,\n      true,\n      _superNftAddress,\n      _nftAddress,\n      0x0000000000000000000000000000000000000000,\n      initParticipants,\n      _adverUrl\n    );\n\n    games[currentGameIdCounter] = newGame;\n    gameIdCounter++;\n\n    emit GameCreated(\n      currentGameIdCounter,\n      _gameName,\n      _goalCount,\n      _superNftAddress,\n      _nftAddress,\n      _adverUrl\n    );\n  }\n\n  /**\n   * playGame method\n   * @param _gameId gameID\n   * * @param _player plaerAddress\n   */\n  function playGame(uint256 _gameId, address _player) public {\n    // get game info\n    WakuWakuGame memory wakuWakuGame = games[_gameId];\n    require(wakuWakuGame.openingStatus, \"This game is already finished!!\");\n\n    // increment currentCount\n    games[_gameId].currentCount += 1;\n\n    // insert player address if not yet\n    address[] memory participants = wakuWakuGame.paticipants;\n\n    bool alreadyInsertedFlg = false;\n    // check registered status\n    for (uint256 i = 0; i < participants.length; i++) {\n      if (participants[i] == _player) {\n        alreadyInsertedFlg = true;\n      }\n    }\n\n    if (!alreadyInsertedFlg) {\n      address[] memory newParticipants = new address[](participants.length + 1);\n      // insert & set\n      for (uint256 i = 0; i < participants.length; i++) {\n        newParticipants[i] = participants[i];\n      }\n      // push\n      newParticipants[participants.length] = _player;\n      games[_gameId].paticipants = newParticipants;\n    }\n\n    // 確率を計算して条件を満たしたらSuperNFTをミントする\n    if (random() % mintProbability == 0) {\n      // send Super NFT\n      mintNft(wakuWakuGame.supserNftAddress, _gameId, _player);\n    } else {\n      // send Normal NFT\n      mintNft(wakuWakuGame.nftAddress, _gameId, _player);\n    }\n  }\n\n  /**\n   * mintNfts method\n   * @param _nftAddress NFT Contract Address\n   * @param _gameId gameID\n   * @param _player palyer's address\n   */\n  function mintNft(\n    address _nftAddress,\n    uint256 _gameId,\n    address _player\n  ) internal {\n    // get game info\n    WakuWakuGame memory wakuWakuGame = games[_gameId];\n\n    if (wakuWakuGame.nftAddress == _nftAddress) {\n      // create WakuWakuNFT contract instance\n      WakuWakuNFT nft = WakuWakuNFT(wakuWakuGame.nftAddress);\n      // mint\n      nft.mint(_player, _gameId, 1, \"0x\");\n    } else {\n      // create WakuWakuSuperNFT contract instance\n      WakuWakuSuperNFT nft = WakuWakuSuperNFT(wakuWakuGame.supserNftAddress);\n      // mint\n      nft.mint(_player, _gameId, 1, \"0x\");\n    }\n\n    emit NftMinted(_gameId, wakuWakuGame.nftAddress, _player);\n  }\n\n  /**\n   * withdraw method\n   * @param _to receiverAddress\n   */\n  function withdraw(address payable _to) public onlyOwner {\n    uint256 balance = address(this).balance;\n    _to.transfer(balance);\n    emit Withdrawn(_to, balance);\n  }\n\n  // Function to receive Ether. msg.data must be empty\n  receive() external payable {\n    emit Deposited(msg.sender, msg.value);\n  }\n\n  // Fallback function is called when msg.data is not empty\n  fallback() external payable {\n    emit Deposited(msg.sender, msg.value);\n  }\n\n  /**\n   * get OpeningStatus method\n   * @param _gameId gameID\n   */\n  function getOpeningStatus(uint256 _gameId) public view returns (bool result) {\n    result = games[_gameId].openingStatus;\n    return result;\n  }\n\n  /**\n   * Pause Game\n   */\n  function pauseGame(uint256 _gameId) public onlyOwner {\n    games[_gameId].openingStatus = false;\n  }\n\n  /**\n   * change Adver URL method\n   */\n  function changeAdverUrl(\n    uint256 _gameId,\n    string memory _newAdverUrl\n  ) public onlyOwner {\n    string memory oldAdverUrl = games[_gameId].adverUrl;\n    games[_gameId].adverUrl = _newAdverUrl;\n    // emit\n    emit ChangeAdverUrl(oldAdverUrl, _newAdverUrl);\n  }\n\n  /**\n   * change Normal NFT address method\n   */\n  function changeNormalNft(\n    uint256 _gameId,\n    address _newNormalNftAddress\n  ) public onlyOwner {\n    address oldNormalNftAddress = games[_gameId].nftAddress;\n    // change\n    games[_gameId].nftAddress = _newNormalNftAddress;\n\n    emit ChangeNormalNftAddress(oldNormalNftAddress, _newNormalNftAddress);\n  }\n\n  /**\n   * change Super NFT address method\n   */\n  function changeSuperNft(\n    uint256 _gameId,\n    address _newSuperNftAddress\n  ) public onlyOwner {\n    address oldSuperNftAddress = games[_gameId].supserNftAddress;\n    // change\n    games[_gameId].nftAddress = _newSuperNftAddress;\n\n    emit ChangeNormalNftAddress(oldSuperNftAddress, _newSuperNftAddress);\n  }\n\n  /**\n   * goalCountに設定された倍数回目かをチェックするメソッド\n   */\n  function isMultipleOfGoalCount(\n    uint256 _currentCount,\n    uint256 _goalCount\n  ) internal pure returns (bool) {\n    return (_currentCount % _goalCount == 0);\n  }\n\n  /**\n   * 確率の計算用のランダム関数\n   */\n  function random() internal view returns (uint256) {\n    return\n      uint256(\n        keccak256(\n          abi.encodePacked(block.prevrandao, block.timestamp, msg.sender)\n        )\n      );\n  }\n\n  /**\n   * 確率の分母を新たに設定するメソッド\n   * @param newProbability 新しい分母\n   */\n  function setMintProbability(uint256 newProbability) external onlyOwner {\n    mintProbability = newProbability;\n  }\n}\n"
    },
    "contracts/v4/WakuWakuGameV4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./../WakuWakuNFT.sol\";\nimport \"./../WakuWakuSuperNFT.sol\";\nimport \"./../mock/SampleVRF.sol\";\n\n/**\n * WakuWakuGameV4 Contract\n */\ncontract WakuWakuGameV4 is Ownable, ReentrancyGuard {\n  // WakuWakuGame Struct\n  struct WakuWakuGame {\n    string gameName;\n    uint256 currentCount;\n    uint256 goalCount;\n    bool openingStatus;\n    address supserNftAddress;\n    address nftAddress;\n    address winner;\n    address[] paticipants;\n    string adverUrl;\n  }\n\n  // gameID\n  uint256 private gameIdCounter = 0;\n  // ミントできる確率の分母(数が大きくなるほど確率は低くなる)\n  uint256 public mintProbability = 30;\n  // VRF Contract\n  address public sampleVRFAddress;\n\n  // mapping\n  mapping(uint256 => WakuWakuGame) public games;\n\n  // Event\n  event GameCreated(\n    uint256 gameId,\n    string gameName,\n    uint256 goalCount,\n    address superNftAddress,\n    address nftAddress,\n    string adverUrl\n  );\n  event GameFinished(uint256 gameId, address winner);\n  event PrizeSent(\n    uint256 gameId,\n    address erc20TokenAddress,\n    address receiver,\n    uint256 value\n  );\n  event NftMinted(uint256 gameId, address nftAddress, address player);\n  event Withdrawn(address indexed payee, uint256 weiAmount);\n  event WithdrawnToken(\n    address indexed payee,\n    address prizeToken,\n    uint256 weiAmount\n  );\n  event Deposited(address indexed payee, uint256 weiAmount);\n  event ChangeAdverUrl(string oldAdverUrl, string newAdverUrl);\n  event ChangeNormalNftAddress(\n    address oldNormalNftAddress,\n    address newNormalNftAddress\n  );\n  event ChangeSuperNftAddress(\n    address oldSuperNftAddress,\n    address newSuperNftAddress\n  );\n\n  /**\n   * Constructor\n   */\n  constructor(\n    address initialOwner,\n    address _sampleVRFAddress\n  ) Ownable(initialOwner) {\n    sampleVRFAddress = _sampleVRFAddress;\n  }\n\n  /**\n   * CreateGame method\n   */\n  function createGame(\n    string memory _gameName,\n    uint256 _goalCount,\n    address _superNftAddress,\n    address _nftAddress,\n    string memory _adverUrl\n  ) public onlyOwner {\n    // get current gameId\n    uint256 currentGameIdCounter = gameIdCounter;\n    // initial participants\n    address[] memory initParticipants;\n\n    // create New WakuWakuGame\n    WakuWakuGame memory newGame = WakuWakuGame(\n      _gameName,\n      0,\n      _goalCount,\n      true,\n      _superNftAddress,\n      _nftAddress,\n      0x0000000000000000000000000000000000000000,\n      initParticipants,\n      _adverUrl\n    );\n\n    games[currentGameIdCounter] = newGame;\n    gameIdCounter++;\n\n    emit GameCreated(\n      currentGameIdCounter,\n      _gameName,\n      _goalCount,\n      _superNftAddress,\n      _nftAddress,\n      _adverUrl\n    );\n  }\n\n  /**\n   * playGame method\n   * @param _gameId gameID\n   * * @param _player plaerAddress\n   */\n  function playGame(\n    uint256 _gameId,\n    address _player,\n    uint256 pushCount\n  ) public {\n    // get game info\n    WakuWakuGame memory wakuWakuGame = games[_gameId];\n    require(wakuWakuGame.openingStatus, \"This game is already finished!!\");\n\n    // increment currentCount\n    games[_gameId].currentCount += 1;\n\n    // insert player address if not yet\n    address[] memory participants = wakuWakuGame.paticipants;\n\n    bool alreadyInsertedFlg = false;\n    // check registered status\n    for (uint256 i = 0; i < participants.length; i++) {\n      if (participants[i] == _player) {\n        alreadyInsertedFlg = true;\n      }\n    }\n\n    if (!alreadyInsertedFlg) {\n      address[] memory newParticipants = new address[](participants.length + 1);\n      // insert & set\n      for (uint256 i = 0; i < participants.length; i++) {\n        newParticipants[i] = participants[i];\n      }\n      // push\n      newParticipants[participants.length] = _player;\n      games[_gameId].paticipants = newParticipants;\n    }\n\n    // get randamNumber\n    SampleVRF sampleVRF = SampleVRF(sampleVRFAddress);\n    uint256 randamNumber = sampleVRF.s_randomWords(0);\n\n    uint256 normalCount = 0;\n    uint256 superCount = 0;\n\n    for (uint256 i = 0; i < pushCount; i++) {\n      // 確率を計算して条件を満たしたらNFTのミント数を算出する\n      if (random(i, randamNumber) % mintProbability == 0) {\n        if (superCount == 0) superCount++;\n      } else {\n        normalCount++;\n      }\n    }\n\n    // mintNFT\n    if (superCount > 0) {\n      mintNft(wakuWakuGame.supserNftAddress, _gameId, _player, superCount);\n    }\n    mintNft(wakuWakuGame.nftAddress, _gameId, _player, normalCount);\n  }\n\n  /**\n   * mintNfts method\n   * @param _nftAddress NFT Contract Address\n   * @param _gameId gameID\n   * @param _player palyer's address\n   * @param count mint count\n   */\n  function mintNft(\n    address _nftAddress,\n    uint256 _gameId,\n    address _player,\n    uint256 count\n  ) internal {\n    // get game info\n    WakuWakuGame memory wakuWakuGame = games[_gameId];\n\n    if (wakuWakuGame.nftAddress == _nftAddress) {\n      // create WakuWakuNFT contract instance\n      WakuWakuNFT nft = WakuWakuNFT(wakuWakuGame.nftAddress);\n      // mint\n      nft.mint(_player, _gameId, count, \"0x\");\n    } else {\n      // create WakuWakuSuperNFT contract instance\n      WakuWakuSuperNFT nft = WakuWakuSuperNFT(wakuWakuGame.supserNftAddress);\n      // mint\n      nft.mint(_player, _gameId, count, \"0x\");\n    }\n\n    emit NftMinted(_gameId, wakuWakuGame.nftAddress, _player);\n  }\n\n  /**\n   * withdraw method\n   * @param _to receiverAddress\n   */\n  function withdraw(address payable _to) public onlyOwner {\n    uint256 balance = address(this).balance;\n    _to.transfer(balance);\n    emit Withdrawn(_to, balance);\n  }\n\n  // Function to receive Ether. msg.data must be empty\n  receive() external payable {\n    emit Deposited(msg.sender, msg.value);\n  }\n\n  // Fallback function is called when msg.data is not empty\n  fallback() external payable {\n    emit Deposited(msg.sender, msg.value);\n  }\n\n  /**\n   * get OpeningStatus method\n   * @param _gameId gameID\n   */\n  function getOpeningStatus(uint256 _gameId) public view returns (bool result) {\n    result = games[_gameId].openingStatus;\n    return result;\n  }\n\n  /**\n   * Pause Game\n   */\n  function pauseGame(uint256 _gameId) public onlyOwner {\n    games[_gameId].openingStatus = false;\n  }\n\n  /**\n   * change Adver URL method\n   */\n  function changeAdverUrl(\n    uint256 _gameId,\n    string memory _newAdverUrl\n  ) public onlyOwner {\n    string memory oldAdverUrl = games[_gameId].adverUrl;\n    games[_gameId].adverUrl = _newAdverUrl;\n    // emit\n    emit ChangeAdverUrl(oldAdverUrl, _newAdverUrl);\n  }\n\n  /**\n   * change Normal NFT address method\n   */\n  function changeNormalNft(\n    uint256 _gameId,\n    address _newNormalNftAddress\n  ) public onlyOwner {\n    address oldNormalNftAddress = games[_gameId].nftAddress;\n    // change\n    games[_gameId].nftAddress = _newNormalNftAddress;\n\n    emit ChangeNormalNftAddress(oldNormalNftAddress, _newNormalNftAddress);\n  }\n\n  /**\n   * change Super NFT address method\n   */\n  function changeSuperNft(\n    uint256 _gameId,\n    address _newSuperNftAddress\n  ) public onlyOwner {\n    address oldSuperNftAddress = games[_gameId].supserNftAddress;\n    // change\n    games[_gameId].nftAddress = _newSuperNftAddress;\n\n    emit ChangeNormalNftAddress(oldSuperNftAddress, _newSuperNftAddress);\n  }\n\n  /**\n   * goalCountに設定された倍数回目かをチェックするメソッド\n   */\n  function isMultipleOfGoalCount(\n    uint256 _currentCount,\n    uint256 _goalCount\n  ) internal pure returns (bool) {\n    return (_currentCount % _goalCount == 0);\n  }\n\n  /**\n   * 確率の計算用のランダム関数\n   */\n  function random(\n    uint256 count,\n    uint256 randamNumber\n  ) internal view returns (uint256) {\n    return\n      uint256(\n        keccak256(\n          abi.encodePacked(block.prevrandao, randamNumber, count, msg.sender)\n        )\n      );\n  }\n\n  /**\n   * 確率の分母を新たに設定するメソッド\n   * @param newProbability 新しい分母\n   */\n  function setMintProbability(uint256 newProbability) external onlyOwner {\n    mintProbability = newProbability;\n  }\n}\n"
    },
    "contracts/v5/WakuWakuGameV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\nimport \"./../utils/Counters.sol\";\nimport \"./../WakuWakuNFT.sol\";\nimport \"./../WakuWakuSuperNFT.sol\";\nimport \"./../BattleCardNFT.sol\";\nimport \"./../mock/SampleVRF.sol\";\n\n/**\n * WakuWakuGameV5 Contract\n */\ncontract WakuWakuGameV5 is Ownable, ReentrancyGuard, IERC1155Receiver {\n  using Counters for Counters.Counter;\n  Counters.Counter public activeGameIdCounter;\n\n  // 大ボスの情報を格納する構造体\n  struct EnemyInfo {\n    string enemyImgUrl;\n    uint256 enemyLife;\n  }\n\n  // GameInfo Struct\n  struct GameInfo {\n    string gameName;\n    uint256 gameSeacon;\n    bool openingStatus;\n    address normalNftAddress;\n    address superNftAddress;\n    address cardNftAddress;\n    uint256 cardNftSupply;\n    uint256 currentSupply;\n    address winner;\n    EnemyInfo enemyInfo;\n  }\n\n  // ボスの攻撃力\n  uint256[] private bossAttacks = [30, 40, 50, 60, 70, 80, 90, 100];\n  // 最も貢献したプレイヤーのアドレスとcount数を保持しておくための変数\n  address public maxAddress;\n  uint256 public maxCount;\n\n  // mapping\n  mapping(uint256 => GameInfo) public games;\n  mapping(uint256 => mapping(address => uint256)) public partipants;\n\n  // Event\n  event GameCreated(\n    uint256 gameId,\n    string gameName,\n    uint256 gameSeacon,\n    bool openingStatus,\n    address normalNftAddress,\n    address superNftAddress,\n    address cardNftAddress,\n    uint256 cardNftSupply,\n    uint256 currentSupply,\n    address winner,\n    EnemyInfo enemyInfo\n  );\n  event GameSeasonChanged(uint256 gameId, uint256 season);\n  event Attack(\n    uint256 gameId,\n    address player,\n    string result,\n    uint256 attack,\n    uint256 pushCount\n  );\n  event GameFinished(uint256 gameId, address winner);\n  event NftMinted(uint256 gameId, address nftAddress, address player);\n  event Withdraw(address indexed payee, uint256 weiAmount);\n  event WithdrawToken(\n    address indexed payee,\n    address prizeToken,\n    uint256 weiAmount\n  );\n  event Deposited(address indexed payee, uint256 weiAmount);\n  event ChangeEnemyImgUrl(string oldEnemyUrl, string newEnemyUrl);\n  event ChangeNormalNftAddress(\n    address oldNormalNftAddress,\n    address newNormalNftAddress\n  );\n  event ChangeSuperNftAddress(\n    address oldSuperNftAddress,\n    address newSuperNftAddress\n  );\n\n  modifier onlyGameOpening(uint256 gameId) {\n    require(games[gameId].openingStatus, \"Game is not open yet\");\n    _;\n  }\n\n  /**\n   * Constructor\n   */\n  constructor(address initialOwner) Ownable(initialOwner) {}\n\n  /**\n   * CreateGame method\n   */\n  function createGame(\n    string memory _gameName,\n    address _normalNftAddress,\n    address _superNftAddress,\n    address _cardNftAddress,\n    uint256 _cardNftSupply,\n    string memory _enemyImgUrl,\n    uint256 _enemyLife\n  ) public onlyOwner {\n    // get current gameId\n    uint256 currentGameId = activeGameIdCounter.current();\n\n    // ボスキャラの情報を作成する。\n    EnemyInfo memory enemyInfo = EnemyInfo(_enemyImgUrl, _enemyLife);\n\n    // create New WakuWakuGame\n    GameInfo memory newGame = GameInfo(\n      _gameName,\n      1,\n      true,\n      _normalNftAddress,\n      _superNftAddress,\n      _cardNftAddress,\n      _cardNftSupply,\n      0,\n      0x0000000000000000000000000000000000000000,\n      enemyInfo\n    );\n\n    games[currentGameId] = newGame;\n\n    emit GameCreated(\n      currentGameId,\n      _gameName,\n      1,\n      true,\n      _normalNftAddress,\n      _superNftAddress,\n      _cardNftAddress,\n      _cardNftSupply,\n      0,\n      0x0000000000000000000000000000000000000000,\n      enemyInfo\n    );\n  }\n\n  /**\n   * playGame method\n   * @param _player gameID\n   * @param _pushCount plaerAddress\n   */\n  function playGame(\n    address _player,\n    uint256 _pushCount\n  ) public onlyGameOpening(activeGameIdCounter.current()) {\n    // get current active gameId\n    uint256 activeGameId = activeGameIdCounter.current();\n    // get game info\n    GameInfo memory wakuWakuGame = games[activeGameId];\n    require(wakuWakuGame.openingStatus, \"This game is already finished!!\");\n\n    // シーズン情報を取得する\n    uint256 currentSeason = wakuWakuGame.gameSeacon;\n    // シーズン1とシーズン2でロジックを切り替える\n    if (currentSeason == 1) {\n      // get current supply\n      uint256 currentSupply = wakuWakuGame.currentSupply;\n      uint256 newSupply = currentSupply + _pushCount;\n      // セット\n      wakuWakuGame.currentSupply = newSupply;\n      // cardSupply\n      uint256 cardNftSupply = wakuWakuGame.cardNftSupply;\n      // Battle Card NFTをミントする。\n      mintNft(wakuWakuGame.cardNftAddress, activeGameId, _player, _pushCount);\n      if (newSupply >= cardNftSupply) {\n        wakuWakuGame.gameSeacon = 2;\n        emit GameSeasonChanged(activeGameId, 2);\n      }\n      // 新しくGameInfoをセットし直す\n      games[activeGameId] = wakuWakuGame;\n    } else if (currentSeason == 2) {\n      // ボスの攻撃力をランダムで取得する。\n      uint256 randomIndex = random(_pushCount);\n      // uint256 randomAttack = bossAttacks[0];  // ローカルでテストする時はこれを使うこと\n      uint256 randomAttack = bossAttacks[randomIndex];\n      // ボスの攻撃力とpushCountを比較する。\n      if (_pushCount >= randomAttack) {\n        // ボスにダメージを与えるロジック\n        // ボスキャラの体力を取得する。\n        uint256 currentEnemyLife = wakuWakuGame.enemyInfo.enemyLife;\n        // pushCount分だけ体力を減らす。(0以下になった場合は強制的に0にしてゲームを終了させる。)\n        if (_pushCount >= currentEnemyLife) {\n          // プレイヤーがこれまで与えたダメージを取得する。\n          uint256 currentCount = partipants[activeGameId][_player];\n          // プレイヤーが与えたダメージを更新する。\n          uint256 newCount = currentCount + _pushCount;\n          partipants[activeGameId][_player] = newCount;\n          // call check checkMaxCount メソッド\n          checkMaxCount(_player, newCount);\n          // maxCount を更新する。\n          maxCount = 0;\n          // Gameのステータスを更新する。\n          wakuWakuGame.openingStatus = false;\n          // winnerアドレスを設定する。\n          wakuWakuGame.winner = maxAddress;\n          wakuWakuGame.enemyInfo.enemyLife = 0;\n          // NFTをミントする。(winner用)\n          mintNft(wakuWakuGame.superNftAddress, activeGameId, maxAddress, 1);\n          // 新しくGameInfoをセットし直す\n          games[activeGameId] = wakuWakuGame;\n          // acticeGameIdをインクリメントする。\n          activeGameIdCounter.increment();\n          // GameFinish イベントを終了させる。\n          emit GameFinished(activeGameId, maxAddress);\n        } else {\n          // プレイヤーがこれまで与えたダメージを取得する。\n          uint256 currentCount = partipants[activeGameId][_player];\n          // プレイヤーが与えたダメージを更新する。\n          uint256 newCount = currentCount + _pushCount;\n          partipants[activeGameId][_player] = newCount;\n          // call check checkMaxCount メソッド\n          checkMaxCount(_player, newCount);\n          // 大ボスのHPを更新する。\n          uint256 newEnemyLife = currentEnemyLife - _pushCount;\n          wakuWakuGame.enemyInfo.enemyLife = newEnemyLife;\n          // 新しくGameInfoをセットし直す\n          games[activeGameId] = wakuWakuGame;\n          // create NFT\n          BattleCardNFT nft = BattleCardNFT(wakuWakuGame.cardNftAddress);\n          // ローカル変数に詰める\n          address to = _player;\n          uint256 value = _pushCount;\n          // CardNFTをプレイヤーに譲渡する。 (預けたNFTが戻ってくるイメージ)\n          nft.safeTransferFrom(address(this), to, activeGameId, value, \"0x\");\n        }\n\n        emit Attack(activeGameId, _player, \"win\", randomAttack, _pushCount);\n      } else {\n        // ボスからダメージを受けるロジック。\n        // 預けたNFTは全て没収される。\n        emit Attack(activeGameId, _player, \"lose\", randomAttack, _pushCount);\n      }\n    }\n  }\n\n  /**\n   * ゲーム終了後にノーマルNFTとスーパーNFTをミントするメソッド\n   * @param _nftAddress NFT Contract Address\n   * @param _gameId gameID\n   * @param _player palyer's address\n   * @param _count push count\n   */\n  function mintNft(\n    address _nftAddress,\n    uint256 _gameId,\n    address _player,\n    uint256 _count\n  ) internal {\n    // get game info\n    GameInfo memory wakuWakuGame = games[_gameId];\n\n    if (wakuWakuGame.normalNftAddress == _nftAddress) {\n      // create WakuWakuNFT contract instance\n      WakuWakuNFT nft = WakuWakuNFT(_nftAddress);\n      // mint\n      nft.mint(_player, _gameId, 1, \"0x\");\n      emit NftMinted(_gameId, _nftAddress, _player);\n    } else if (wakuWakuGame.superNftAddress == _nftAddress) {\n      // create WakuWakuSuperNFT contract instance\n      WakuWakuSuperNFT nft = WakuWakuSuperNFT(_nftAddress);\n      // mint\n      nft.mint(_player, _gameId, 1, \"0x\");\n      emit NftMinted(_gameId, _nftAddress, _player);\n    } else if (wakuWakuGame.cardNftAddress == _nftAddress) {\n      // create BattleCardNFT contract instance\n      BattleCardNFT nft = BattleCardNFT(_nftAddress);\n      // get current TotalSupply\n      uint256 currentSupply = nft.totalSupply(_gameId);\n      // mint\n      nft.mint(_player, _gameId, _count, \"0x\");\n      emit NftMinted(_gameId, _nftAddress, _player);\n      // もし指定した数以上のNFTをミントしたらシーズンを2に移行させる。\n      if ((currentSupply + _count) >= wakuWakuGame.cardNftSupply) {\n        wakuWakuGame.gameSeacon = 2;\n        emit GameSeasonChanged(_gameId, 2);\n      }\n    }\n  }\n\n  /**\n   * withdraw method\n   * @param _to receiverAddress\n   */\n  function withdraw(address payable _to) public onlyOwner {\n    uint256 balance = address(this).balance;\n    _to.transfer(balance);\n    emit Withdraw(_to, balance);\n  }\n\n  // Function to receive Ether. msg.data must be empty\n  receive() external payable {\n    emit Deposited(msg.sender, msg.value);\n  }\n\n  // Fallback function is called when msg.data is not empty\n  fallback() external payable {\n    emit Deposited(msg.sender, msg.value);\n  }\n\n  /**\n   * get OpeningStatus method\n   * @param _gameId gameID\n   */\n  function getOpeningStatus(uint256 _gameId) public view returns (bool result) {\n    result = games[_gameId].openingStatus;\n    return result;\n  }\n\n  /**\n   * Pause Game\n   */\n  function pauseGame(uint256 _gameId) public onlyOwner {\n    games[_gameId].openingStatus = false;\n  }\n\n  /**\n   * change Enemy URL method\n   */\n  function changeEnemyUrl(\n    uint256 _gameId,\n    string memory _newEnemyImgUrl\n  ) public onlyOwner {\n    string memory oldEnemyImgUrl = games[_gameId].enemyInfo.enemyImgUrl;\n    games[_gameId].enemyInfo.enemyImgUrl = _newEnemyImgUrl;\n    // emit\n    emit ChangeEnemyImgUrl(oldEnemyImgUrl, _newEnemyImgUrl);\n  }\n\n  /**\n   * change Normal NFT address method\n   */\n  function changeNormalNft(\n    uint256 _gameId,\n    address _newNormalNftAddress\n  ) public onlyOwner {\n    address oldNormalNftAddress = games[_gameId].normalNftAddress;\n    // change\n    games[_gameId].normalNftAddress = _newNormalNftAddress;\n\n    emit ChangeNormalNftAddress(oldNormalNftAddress, _newNormalNftAddress);\n  }\n\n  /**\n   * change Super NFT address method\n   */\n  function changeSuperNft(\n    uint256 _gameId,\n    address _newSuperNftAddress\n  ) public onlyOwner {\n    address oldSuperNftAddress = games[_gameId].superNftAddress;\n    // change\n    games[_gameId].superNftAddress = _newSuperNftAddress;\n\n    emit ChangeNormalNftAddress(oldSuperNftAddress, _newSuperNftAddress);\n  }\n\n  /**\n   * 確率の計算用のランダム関数\n   */\n  function random(uint256 count) internal view returns (uint256) {\n    return\n      uint256(\n        keccak256(abi.encodePacked(block.prevrandao, count, msg.sender))\n      ) % bossAttacks.length;\n  }\n\n  /**\n   * 新たに更新されたnewCountが最大値かどうかをチェックするメソッド\n   */\n  function checkMaxCount(address _player, uint256 _count) internal {\n    require(_count > 0, \"count must be greater than zero\");\n    // もし最大値以上であれば値を更新する。\n    if (_count > maxCount) {\n      maxCount = _count;\n      maxAddress = _player;\n    }\n  }\n\n  /**\n   * active中のGameIdを取得するメソッド\n   */\n  function getActiveGameId() public view returns (uint256) {\n    return activeGameIdCounter.current();\n  }\n\n  /**\n   * getActiveGameInfo\n   */\n  function getActiveGameInfo() public view returns (GameInfo memory) {\n    uint256 activeId =  activeGameIdCounter.current();\n    return games[activeId];\n  }\n\n  /**\n   * =======================================================================================\n   * IERC1155Receiver Contract method\n   * =======================================================================================\n   */\n\n  function onERC1155Received(\n    address operator,\n    address from,\n    uint256 id,\n    uint256 value,\n    bytes calldata data\n  ) external override returns (bytes4) {\n    return this.onERC1155Received.selector;\n  }\n\n  function onERC1155BatchReceived(\n    address operator,\n    address from,\n    uint256[] calldata ids,\n    uint256[] calldata values,\n    bytes calldata data\n  ) external override returns (bytes4) {\n    return this.onERC1155BatchReceived.selector;\n  }\n\n  /**\n   * =======================================================================================\n   * IERC165 Contract method\n   * =======================================================================================\n   */\n\n  function supportsInterface(\n    bytes4 interfaceId\n  ) external view override returns (bool) {\n    return true;\n  }\n}\n"
    },
    "contracts/WakuWakuNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\n\n/**\n * WakuWakuNFT Contract\n */\ncontract WakuWakuNFT is ERC1155, Ownable, ERC1155Burnable, ERC1155Supply {\n  constructor(\n    address initialOwner\n  )\n    ERC1155(\n      \"https://bafybeihd5jasbp6spqqapd6jzy7zfosiukwqbx4capmhayjt3yxagudwma.ipfs.dweb.link/json/metadata\"\n    )\n    Ownable(initialOwner)\n  {}\n\n  function setURI(string memory newuri) public onlyOwner {\n    _setURI(newuri);\n  }\n\n  function mint(\n    address account,\n    uint256 id,\n    uint256 amount,\n    bytes memory data\n  ) public onlyOwner {\n    _mint(account, id, amount, data);\n  }\n\n  function mintBatch(\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts,\n    bytes memory data\n  ) public onlyOwner {\n    _mintBatch(to, ids, amounts, data);\n  }\n\n  // The following functions are overrides required by Solidity.\n  function _update(\n    address from,\n    address to,\n    uint256[] memory ids,\n    uint256[] memory values\n  ) internal override(ERC1155, ERC1155Supply) {\n    super._update(from, to, ids, values);\n  }\n}\n"
    },
    "contracts/WakuWakuSuperNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\";\n\n/**\n * WakuWakuSuperNFT Contract\n */\ncontract WakuWakuSuperNFT is ERC1155, Ownable, ERC1155Burnable, ERC1155Supply {\n    constructor(address initialOwner)\n        ERC1155(\"https://bafkreib4c2d7kp4xspm42cxw32m4ilvbzuj4prbimwejkvjammpqo2mqym.ipfs.w3s.link/\")\n        Ownable(initialOwner)\n    {}\n\n    function setURI(string memory newuri) public onlyOwner {\n        _setURI(newuri);\n    }\n\n    function mint(\n      address account, \n      uint256 id, \n      uint256 amount, \n      bytes memory data\n    )  \n        public\n        onlyOwner\n    {\n        _mint(account, id, amount, data);\n    }\n\n    function mintBatch(\n      address to, \n      uint256[] memory ids,\n      uint256[] memory amounts, \n      bytes memory data\n    )\n        public\n        onlyOwner\n    {\n        _mintBatch(to, ids, amounts, data);\n    }\n\n    // The following functions are overrides required by Solidity.\n    function _update(\n      address from, \n      address to, \n      uint256[] memory ids, \n      uint256[] memory values\n    )\n        internal\n        override(ERC1155, ERC1155Supply)\n    {\n        super._update(from, to, ids, values);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}